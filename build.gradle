plugins {
    id 'java-library'
    id 'maven-publish'
}

group = 'su.demands'
version = '0.0.3-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    compileOnly 'org.projectlombok:lombok:1.18.24'

    api 'org.jetbrains:annotations:24.0.0'
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 60, 'seconds'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.incremental = true
    sourceCompatibility = "16"
    targetCompatibility = "16"
}

tasks.withType(Javadoc).all {
    enabled = false
}

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = 'darkswing'
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'D4J-DFramework'
                description = 'A JVM-based Discord4J wrapper for the official Discord Bot API'
                url = 'https://github.com/Demandss/DarkSwing/'
                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/Demandss/DarkSwing/issues'
                }
                developers {
                    developer {
                        name = 'Demands'
                    }
                }
                scm {
                    url = 'https://github.com/Demandss/DarkSwing/'
                    connection = 'scm:git:git://Demandss/DarkSwing.git'
                    developerConnection = 'scm:git:ssh://Demandss/DarkSwing.git'
                }
            }
        }
    }
    repositories {
        maven {
            url = layout.buildDirectory.dir('repos/snapshots')
        }
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}